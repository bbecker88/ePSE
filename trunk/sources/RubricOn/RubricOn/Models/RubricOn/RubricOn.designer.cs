#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RubricOn.Models.RubricOn
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RubricOn")]
	public partial class RubricOnDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspectosRubrica(AspectosRubrica instance);
    partial void UpdateAspectosRubrica(AspectosRubrica instance);
    partial void DeleteAspectosRubrica(AspectosRubrica instance);
    partial void InsertVersionesRubricas(VersionesRubricas instance);
    partial void UpdateVersionesRubricas(VersionesRubricas instance);
    partial void DeleteVersionesRubricas(VersionesRubricas instance);
    partial void InsertCategoriasRubricas(CategoriasRubricas instance);
    partial void UpdateCategoriasRubricas(CategoriasRubricas instance);
    partial void DeleteCategoriasRubricas(CategoriasRubricas instance);
    partial void InsertCriterioRubrica(CriterioRubrica instance);
    partial void UpdateCriterioRubrica(CriterioRubrica instance);
    partial void DeleteCriterioRubrica(CriterioRubrica instance);
    partial void InsertEvaluaciones(Evaluaciones instance);
    partial void UpdateEvaluaciones(Evaluaciones instance);
    partial void DeleteEvaluaciones(Evaluaciones instance);
    partial void InsertRespuestasRubrica(RespuestasRubrica instance);
    partial void UpdateRespuestasRubrica(RespuestasRubrica instance);
    partial void DeleteRespuestasRubrica(RespuestasRubrica instance);
    partial void InsertResultadosRubricas(ResultadosRubricas instance);
    partial void UpdateResultadosRubricas(ResultadosRubricas instance);
    partial void DeleteResultadosRubricas(ResultadosRubricas instance);
    partial void InsertRubricas(Rubricas instance);
    partial void UpdateRubricas(Rubricas instance);
    partial void DeleteRubricas(Rubricas instance);
    partial void InsertTiposArtefacto(TiposArtefacto instance);
    partial void UpdateTiposArtefacto(TiposArtefacto instance);
    partial void DeleteTiposArtefacto(TiposArtefacto instance);
    #endregion
		
		public RubricOnDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RubricOnConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RubricOnDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RubricOnDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RubricOnDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RubricOnDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspectosRubrica> AspectosRubrica
		{
			get
			{
				return this.GetTable<AspectosRubrica>();
			}
		}
		
		public System.Data.Linq.Table<VersionesRubricas> VersionesRubricas
		{
			get
			{
				return this.GetTable<VersionesRubricas>();
			}
		}
		
		public System.Data.Linq.Table<CategoriasRubricas> CategoriasRubricas
		{
			get
			{
				return this.GetTable<CategoriasRubricas>();
			}
		}
		
		public System.Data.Linq.Table<CriterioRubrica> CriterioRubrica
		{
			get
			{
				return this.GetTable<CriterioRubrica>();
			}
		}
		
		public System.Data.Linq.Table<Evaluaciones> Evaluaciones
		{
			get
			{
				return this.GetTable<Evaluaciones>();
			}
		}
		
		public System.Data.Linq.Table<RespuestasRubrica> RespuestasRubrica
		{
			get
			{
				return this.GetTable<RespuestasRubrica>();
			}
		}
		
		public System.Data.Linq.Table<ResultadosRubricas> ResultadosRubricas
		{
			get
			{
				return this.GetTable<ResultadosRubricas>();
			}
		}
		
		public System.Data.Linq.Table<Rubricas> Rubricas
		{
			get
			{
				return this.GetTable<Rubricas>();
			}
		}
		
		public System.Data.Linq.Table<TiposArtefacto> TiposArtefacto
		{
			get
			{
				return this.GetTable<TiposArtefacto>();
			}
		}
	}
	
	[Table(Name="RUBRICON.AspectosRubrica")]
	public partial class AspectosRubrica : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AspectoRubricaId;
		
		private int _CategoriaRubricaId;
		
		private string _Nombre;
		
		private int _Orden;
		
		private EntitySet<CriterioRubrica> _CriterioRubrica;
		
		private EntityRef<CategoriasRubricas> _CategoriasRubricas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAspectoRubricaIdChanging(int value);
    partial void OnAspectoRubricaIdChanged();
    partial void OnCategoriaRubricaIdChanging(int value);
    partial void OnCategoriaRubricaIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnOrdenChanging(int value);
    partial void OnOrdenChanged();
    #endregion
		
		public AspectosRubrica()
		{
			this._CriterioRubrica = new EntitySet<CriterioRubrica>(new Action<CriterioRubrica>(this.attach_CriterioRubrica), new Action<CriterioRubrica>(this.detach_CriterioRubrica));
			this._CategoriasRubricas = default(EntityRef<CategoriasRubricas>);
			OnCreated();
		}
		
		[Column(Storage="_AspectoRubricaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AspectoRubricaId
		{
			get
			{
				return this._AspectoRubricaId;
			}
			set
			{
				if ((this._AspectoRubricaId != value))
				{
					this.OnAspectoRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._AspectoRubricaId = value;
					this.SendPropertyChanged("AspectoRubricaId");
					this.OnAspectoRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoriaRubricaId", DbType="Int NOT NULL")]
		public int CategoriaRubricaId
		{
			get
			{
				return this._CategoriaRubricaId;
			}
			set
			{
				if ((this._CategoriaRubricaId != value))
				{
					if (this._CategoriasRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoriaRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._CategoriaRubricaId = value;
					this.SendPropertyChanged("CategoriaRubricaId");
					this.OnCategoriaRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Orden", DbType="Int NOT NULL")]
		public int Orden
		{
			get
			{
				return this._Orden;
			}
			set
			{
				if ((this._Orden != value))
				{
					this.OnOrdenChanging(value);
					this.SendPropertyChanging();
					this._Orden = value;
					this.SendPropertyChanged("Orden");
					this.OnOrdenChanged();
				}
			}
		}
		
		[Association(Name="AspectosRubrica_CriterioRubrica", Storage="_CriterioRubrica", ThisKey="AspectoRubricaId", OtherKey="AspectoRubricaId")]
		public EntitySet<CriterioRubrica> CriterioRubrica
		{
			get
			{
				return this._CriterioRubrica;
			}
			set
			{
				this._CriterioRubrica.Assign(value);
			}
		}
		
		[Association(Name="CategoriasRubricas_AspectosRubrica", Storage="_CategoriasRubricas", ThisKey="CategoriaRubricaId", OtherKey="CategoriaRubricaId", IsForeignKey=true)]
		public CategoriasRubricas CategoriasRubricas
		{
			get
			{
				return this._CategoriasRubricas.Entity;
			}
			set
			{
				CategoriasRubricas previousValue = this._CategoriasRubricas.Entity;
				if (((previousValue != value) 
							|| (this._CategoriasRubricas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoriasRubricas.Entity = null;
						previousValue.AspectosRubrica.Remove(this);
					}
					this._CategoriasRubricas.Entity = value;
					if ((value != null))
					{
						value.AspectosRubrica.Add(this);
						this._CategoriaRubricaId = value.CategoriaRubricaId;
					}
					else
					{
						this._CategoriaRubricaId = default(int);
					}
					this.SendPropertyChanged("CategoriasRubricas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CriterioRubrica(CriterioRubrica entity)
		{
			this.SendPropertyChanging();
			entity.AspectosRubrica = this;
		}
		
		private void detach_CriterioRubrica(CriterioRubrica entity)
		{
			this.SendPropertyChanging();
			entity.AspectosRubrica = null;
		}
	}
	
	[Table(Name="RUBRICON.VersionesRubricas")]
	public partial class VersionesRubricas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TipoArtefacto;
		
		private string _RubricaId;
		
		private string _Version;
		
		private string _Descripcion;
		
		private System.DateTime _FechaCreacion;
		
		private string _TipoRubrica;
		
		private string _CreadorId;
		
		private bool _EsActual;
		
		private EntitySet<CategoriasRubricas> _CategoriasRubricas;
		
		private EntitySet<Evaluaciones> _Evaluaciones;
		
		private EntityRef<Rubricas> _Rubricas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTipoArtefactoChanging(string value);
    partial void OnTipoArtefactoChanged();
    partial void OnRubricaIdChanging(string value);
    partial void OnRubricaIdChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnFechaCreacionChanging(System.DateTime value);
    partial void OnFechaCreacionChanged();
    partial void OnTipoRubricaChanging(string value);
    partial void OnTipoRubricaChanged();
    partial void OnCreadorIdChanging(string value);
    partial void OnCreadorIdChanged();
    partial void OnEsActualChanging(bool value);
    partial void OnEsActualChanged();
    #endregion
		
		public VersionesRubricas()
		{
			this._CategoriasRubricas = new EntitySet<CategoriasRubricas>(new Action<CategoriasRubricas>(this.attach_CategoriasRubricas), new Action<CategoriasRubricas>(this.detach_CategoriasRubricas));
			this._Evaluaciones = new EntitySet<Evaluaciones>(new Action<Evaluaciones>(this.attach_Evaluaciones), new Action<Evaluaciones>(this.detach_Evaluaciones));
			this._Rubricas = default(EntityRef<Rubricas>);
			OnCreated();
		}
		
		[Column(Storage="_TipoArtefacto", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TipoArtefacto
		{
			get
			{
				return this._TipoArtefacto;
			}
			set
			{
				if ((this._TipoArtefacto != value))
				{
					if (this._Rubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoArtefactoChanging(value);
					this.SendPropertyChanging();
					this._TipoArtefacto = value;
					this.SendPropertyChanged("TipoArtefacto");
					this.OnTipoArtefactoChanged();
				}
			}
		}
		
		[Column(Storage="_RubricaId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					if (this._Rubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_FechaCreacion", DbType="DateTime NOT NULL")]
		public System.DateTime FechaCreacion
		{
			get
			{
				return this._FechaCreacion;
			}
			set
			{
				if ((this._FechaCreacion != value))
				{
					this.OnFechaCreacionChanging(value);
					this.SendPropertyChanging();
					this._FechaCreacion = value;
					this.SendPropertyChanged("FechaCreacion");
					this.OnFechaCreacionChanged();
				}
			}
		}
		
		[Column(Storage="_TipoRubrica", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string TipoRubrica
		{
			get
			{
				return this._TipoRubrica;
			}
			set
			{
				if ((this._TipoRubrica != value))
				{
					this.OnTipoRubricaChanging(value);
					this.SendPropertyChanging();
					this._TipoRubrica = value;
					this.SendPropertyChanged("TipoRubrica");
					this.OnTipoRubricaChanged();
				}
			}
		}
		
		[Column(Storage="_CreadorId", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CreadorId
		{
			get
			{
				return this._CreadorId;
			}
			set
			{
				if ((this._CreadorId != value))
				{
					this.OnCreadorIdChanging(value);
					this.SendPropertyChanging();
					this._CreadorId = value;
					this.SendPropertyChanged("CreadorId");
					this.OnCreadorIdChanged();
				}
			}
		}
		
		[Column(Storage="_EsActual", DbType="Bit NOT NULL")]
		public bool EsActual
		{
			get
			{
				return this._EsActual;
			}
			set
			{
				if ((this._EsActual != value))
				{
					this.OnEsActualChanging(value);
					this.SendPropertyChanging();
					this._EsActual = value;
					this.SendPropertyChanged("EsActual");
					this.OnEsActualChanged();
				}
			}
		}
		
		[Association(Name="VersionesRubricas_CategoriasRubricas", Storage="_CategoriasRubricas", ThisKey="TipoArtefacto,RubricaId,Version", OtherKey="TipoArtefacto,RubricaId,Version")]
		public EntitySet<CategoriasRubricas> CategoriasRubricas
		{
			get
			{
				return this._CategoriasRubricas;
			}
			set
			{
				this._CategoriasRubricas.Assign(value);
			}
		}
		
		[Association(Name="VersionesRubricas_Evaluaciones", Storage="_Evaluaciones", ThisKey="TipoArtefacto,RubricaId,Version", OtherKey="TipoArtefacto,RubricaId,Version")]
		public EntitySet<Evaluaciones> Evaluaciones
		{
			get
			{
				return this._Evaluaciones;
			}
			set
			{
				this._Evaluaciones.Assign(value);
			}
		}
		
		[Association(Name="Rubricas_VersionesRubricas", Storage="_Rubricas", ThisKey="RubricaId,TipoArtefacto", OtherKey="RubricaId,TipoArtefacto", IsForeignKey=true)]
		public Rubricas Rubricas
		{
			get
			{
				return this._Rubricas.Entity;
			}
			set
			{
				Rubricas previousValue = this._Rubricas.Entity;
				if (((previousValue != value) 
							|| (this._Rubricas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rubricas.Entity = null;
						previousValue.VersionesRubricas.Remove(this);
					}
					this._Rubricas.Entity = value;
					if ((value != null))
					{
						value.VersionesRubricas.Add(this);
						this._RubricaId = value.RubricaId;
						this._TipoArtefacto = value.TipoArtefacto;
					}
					else
					{
						this._RubricaId = default(string);
						this._TipoArtefacto = default(string);
					}
					this.SendPropertyChanged("Rubricas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoriasRubricas(CategoriasRubricas entity)
		{
			this.SendPropertyChanging();
			entity.VersionesRubricas = this;
		}
		
		private void detach_CategoriasRubricas(CategoriasRubricas entity)
		{
			this.SendPropertyChanging();
			entity.VersionesRubricas = null;
		}
		
		private void attach_Evaluaciones(Evaluaciones entity)
		{
			this.SendPropertyChanging();
			entity.VersionesRubricas = this;
		}
		
		private void detach_Evaluaciones(Evaluaciones entity)
		{
			this.SendPropertyChanging();
			entity.VersionesRubricas = null;
		}
	}
	
	[Table(Name="RUBRICON.CategoriasRubricas")]
	public partial class CategoriasRubricas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RubricaId;
		
		private string _Version;
		
		private int _CategoriaRubricaId;
		
		private string _Nombre;
		
		private int _Orden;
		
		private string _TipoArtefacto;
		
		private string _OutcomeId;
		
		private EntitySet<AspectosRubrica> _AspectosRubrica;
		
		private EntityRef<VersionesRubricas> _VersionesRubricas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricaIdChanging(string value);
    partial void OnRubricaIdChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnCategoriaRubricaIdChanging(int value);
    partial void OnCategoriaRubricaIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnOrdenChanging(int value);
    partial void OnOrdenChanged();
    partial void OnTipoArtefactoChanging(string value);
    partial void OnTipoArtefactoChanged();
    partial void OnOutcomeIdChanging(string value);
    partial void OnOutcomeIdChanged();
    #endregion
		
		public CategoriasRubricas()
		{
			this._AspectosRubrica = new EntitySet<AspectosRubrica>(new Action<AspectosRubrica>(this.attach_AspectosRubrica), new Action<AspectosRubrica>(this.detach_AspectosRubrica));
			this._VersionesRubricas = default(EntityRef<VersionesRubricas>);
			OnCreated();
		}
		
		[Column(Storage="_RubricaId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					if (this._VersionesRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					if (this._VersionesRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_CategoriaRubricaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoriaRubricaId
		{
			get
			{
				return this._CategoriaRubricaId;
			}
			set
			{
				if ((this._CategoriaRubricaId != value))
				{
					this.OnCategoriaRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._CategoriaRubricaId = value;
					this.SendPropertyChanged("CategoriaRubricaId");
					this.OnCategoriaRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Orden", DbType="Int NOT NULL")]
		public int Orden
		{
			get
			{
				return this._Orden;
			}
			set
			{
				if ((this._Orden != value))
				{
					this.OnOrdenChanging(value);
					this.SendPropertyChanging();
					this._Orden = value;
					this.SendPropertyChanged("Orden");
					this.OnOrdenChanged();
				}
			}
		}
		
		[Column(Storage="_TipoArtefacto", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TipoArtefacto
		{
			get
			{
				return this._TipoArtefacto;
			}
			set
			{
				if ((this._TipoArtefacto != value))
				{
					if (this._VersionesRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoArtefactoChanging(value);
					this.SendPropertyChanging();
					this._TipoArtefacto = value;
					this.SendPropertyChanged("TipoArtefacto");
					this.OnTipoArtefactoChanged();
				}
			}
		}
		
		[Column(Storage="_OutcomeId", DbType="VarChar(2)")]
		public string OutcomeId
		{
			get
			{
				return this._OutcomeId;
			}
			set
			{
				if ((this._OutcomeId != value))
				{
					this.OnOutcomeIdChanging(value);
					this.SendPropertyChanging();
					this._OutcomeId = value;
					this.SendPropertyChanged("OutcomeId");
					this.OnOutcomeIdChanged();
				}
			}
		}
		
		[Association(Name="CategoriasRubricas_AspectosRubrica", Storage="_AspectosRubrica", ThisKey="CategoriaRubricaId", OtherKey="CategoriaRubricaId")]
		public EntitySet<AspectosRubrica> AspectosRubrica
		{
			get
			{
				return this._AspectosRubrica;
			}
			set
			{
				this._AspectosRubrica.Assign(value);
			}
		}
		
		[Association(Name="VersionesRubricas_CategoriasRubricas", Storage="_VersionesRubricas", ThisKey="TipoArtefacto,RubricaId,Version", OtherKey="TipoArtefacto,RubricaId,Version", IsForeignKey=true)]
		public VersionesRubricas VersionesRubricas
		{
			get
			{
				return this._VersionesRubricas.Entity;
			}
			set
			{
				VersionesRubricas previousValue = this._VersionesRubricas.Entity;
				if (((previousValue != value) 
							|| (this._VersionesRubricas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VersionesRubricas.Entity = null;
						previousValue.CategoriasRubricas.Remove(this);
					}
					this._VersionesRubricas.Entity = value;
					if ((value != null))
					{
						value.CategoriasRubricas.Add(this);
						this._TipoArtefacto = value.TipoArtefacto;
						this._RubricaId = value.RubricaId;
						this._Version = value.Version;
					}
					else
					{
						this._TipoArtefacto = default(string);
						this._RubricaId = default(string);
						this._Version = default(string);
					}
					this.SendPropertyChanged("VersionesRubricas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspectosRubrica(AspectosRubrica entity)
		{
			this.SendPropertyChanging();
			entity.CategoriasRubricas = this;
		}
		
		private void detach_AspectosRubrica(AspectosRubrica entity)
		{
			this.SendPropertyChanging();
			entity.CategoriasRubricas = null;
		}
	}
	
	[Table(Name="RUBRICON.CriterioRubrica")]
	public partial class CriterioRubrica : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CriterioRubricaId;
		
		private int _AspectoRubricaId;
		
		private string _Nombre;
		
		private double _Valor;
		
		private int _Orden;
		
		private EntitySet<RespuestasRubrica> _RespuestasRubrica;
		
		private EntityRef<AspectosRubrica> _AspectosRubrica;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCriterioRubricaIdChanging(int value);
    partial void OnCriterioRubricaIdChanged();
    partial void OnAspectoRubricaIdChanging(int value);
    partial void OnAspectoRubricaIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnValorChanging(double value);
    partial void OnValorChanged();
    partial void OnOrdenChanging(int value);
    partial void OnOrdenChanged();
    #endregion
		
		public CriterioRubrica()
		{
			this._RespuestasRubrica = new EntitySet<RespuestasRubrica>(new Action<RespuestasRubrica>(this.attach_RespuestasRubrica), new Action<RespuestasRubrica>(this.detach_RespuestasRubrica));
			this._AspectosRubrica = default(EntityRef<AspectosRubrica>);
			OnCreated();
		}
		
		[Column(Storage="_CriterioRubricaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CriterioRubricaId
		{
			get
			{
				return this._CriterioRubricaId;
			}
			set
			{
				if ((this._CriterioRubricaId != value))
				{
					this.OnCriterioRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._CriterioRubricaId = value;
					this.SendPropertyChanged("CriterioRubricaId");
					this.OnCriterioRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_AspectoRubricaId", DbType="Int NOT NULL")]
		public int AspectoRubricaId
		{
			get
			{
				return this._AspectoRubricaId;
			}
			set
			{
				if ((this._AspectoRubricaId != value))
				{
					if (this._AspectosRubrica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAspectoRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._AspectoRubricaId = value;
					this.SendPropertyChanged("AspectoRubricaId");
					this.OnAspectoRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Valor", DbType="Float NOT NULL")]
		public double Valor
		{
			get
			{
				return this._Valor;
			}
			set
			{
				if ((this._Valor != value))
				{
					this.OnValorChanging(value);
					this.SendPropertyChanging();
					this._Valor = value;
					this.SendPropertyChanged("Valor");
					this.OnValorChanged();
				}
			}
		}
		
		[Column(Storage="_Orden", DbType="Int NOT NULL")]
		public int Orden
		{
			get
			{
				return this._Orden;
			}
			set
			{
				if ((this._Orden != value))
				{
					this.OnOrdenChanging(value);
					this.SendPropertyChanging();
					this._Orden = value;
					this.SendPropertyChanged("Orden");
					this.OnOrdenChanged();
				}
			}
		}
		
		[Association(Name="CriterioRubrica_RespuestasRubrica", Storage="_RespuestasRubrica", ThisKey="CriterioRubricaId", OtherKey="CriterioRubricaId")]
		public EntitySet<RespuestasRubrica> RespuestasRubrica
		{
			get
			{
				return this._RespuestasRubrica;
			}
			set
			{
				this._RespuestasRubrica.Assign(value);
			}
		}
		
		[Association(Name="AspectosRubrica_CriterioRubrica", Storage="_AspectosRubrica", ThisKey="AspectoRubricaId", OtherKey="AspectoRubricaId", IsForeignKey=true)]
		public AspectosRubrica AspectosRubrica
		{
			get
			{
				return this._AspectosRubrica.Entity;
			}
			set
			{
				AspectosRubrica previousValue = this._AspectosRubrica.Entity;
				if (((previousValue != value) 
							|| (this._AspectosRubrica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspectosRubrica.Entity = null;
						previousValue.CriterioRubrica.Remove(this);
					}
					this._AspectosRubrica.Entity = value;
					if ((value != null))
					{
						value.CriterioRubrica.Add(this);
						this._AspectoRubricaId = value.AspectoRubricaId;
					}
					else
					{
						this._AspectoRubricaId = default(int);
					}
					this.SendPropertyChanged("AspectosRubrica");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RespuestasRubrica(RespuestasRubrica entity)
		{
			this.SendPropertyChanging();
			entity.CriterioRubrica = this;
		}
		
		private void detach_RespuestasRubrica(RespuestasRubrica entity)
		{
			this.SendPropertyChanging();
			entity.CriterioRubrica = null;
		}
	}
	
	[Table(Name="RUBRICON.Evaluaciones")]
	public partial class Evaluaciones : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluacionId;
		
		private string _CodigoEvaluadoId;
		
		private string _CodigoEvaluadorId;
		
		private System.DateTime _FechaEvaluacion;
		
		private string _RubricaId;
		
		private string _Version;
		
		private string _TipoArtefacto;
		
		private EntitySet<RespuestasRubrica> _RespuestasRubrica;
		
		private EntityRef<ResultadosRubricas> _ResultadosRubricas;
		
		private EntityRef<VersionesRubricas> _VersionesRubricas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluacionIdChanging(int value);
    partial void OnEvaluacionIdChanged();
    partial void OnCodigoEvaluadoIdChanging(string value);
    partial void OnCodigoEvaluadoIdChanged();
    partial void OnCodigoEvaluadorIdChanging(string value);
    partial void OnCodigoEvaluadorIdChanged();
    partial void OnFechaEvaluacionChanging(System.DateTime value);
    partial void OnFechaEvaluacionChanged();
    partial void OnRubricaIdChanging(string value);
    partial void OnRubricaIdChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnTipoArtefactoChanging(string value);
    partial void OnTipoArtefactoChanged();
    #endregion
		
		public Evaluaciones()
		{
			this._RespuestasRubrica = new EntitySet<RespuestasRubrica>(new Action<RespuestasRubrica>(this.attach_RespuestasRubrica), new Action<RespuestasRubrica>(this.detach_RespuestasRubrica));
			this._ResultadosRubricas = default(EntityRef<ResultadosRubricas>);
			this._VersionesRubricas = default(EntityRef<VersionesRubricas>);
			OnCreated();
		}
		
		[Column(Storage="_EvaluacionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluacionId
		{
			get
			{
				return this._EvaluacionId;
			}
			set
			{
				if ((this._EvaluacionId != value))
				{
					this.OnEvaluacionIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluacionId = value;
					this.SendPropertyChanged("EvaluacionId");
					this.OnEvaluacionIdChanged();
				}
			}
		}
		
		[Column(Storage="_CodigoEvaluadoId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CodigoEvaluadoId
		{
			get
			{
				return this._CodigoEvaluadoId;
			}
			set
			{
				if ((this._CodigoEvaluadoId != value))
				{
					this.OnCodigoEvaluadoIdChanging(value);
					this.SendPropertyChanging();
					this._CodigoEvaluadoId = value;
					this.SendPropertyChanged("CodigoEvaluadoId");
					this.OnCodigoEvaluadoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CodigoEvaluadorId", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CodigoEvaluadorId
		{
			get
			{
				return this._CodigoEvaluadorId;
			}
			set
			{
				if ((this._CodigoEvaluadorId != value))
				{
					this.OnCodigoEvaluadorIdChanging(value);
					this.SendPropertyChanging();
					this._CodigoEvaluadorId = value;
					this.SendPropertyChanged("CodigoEvaluadorId");
					this.OnCodigoEvaluadorIdChanged();
				}
			}
		}
		
		[Column(Storage="_FechaEvaluacion", DbType="DateTime NOT NULL")]
		public System.DateTime FechaEvaluacion
		{
			get
			{
				return this._FechaEvaluacion;
			}
			set
			{
				if ((this._FechaEvaluacion != value))
				{
					this.OnFechaEvaluacionChanging(value);
					this.SendPropertyChanging();
					this._FechaEvaluacion = value;
					this.SendPropertyChanged("FechaEvaluacion");
					this.OnFechaEvaluacionChanged();
				}
			}
		}
		
		[Column(Storage="_RubricaId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					if (this._VersionesRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					if (this._VersionesRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_TipoArtefacto", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TipoArtefacto
		{
			get
			{
				return this._TipoArtefacto;
			}
			set
			{
				if ((this._TipoArtefacto != value))
				{
					if (this._VersionesRubricas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoArtefactoChanging(value);
					this.SendPropertyChanging();
					this._TipoArtefacto = value;
					this.SendPropertyChanged("TipoArtefacto");
					this.OnTipoArtefactoChanged();
				}
			}
		}
		
		[Association(Name="Evaluaciones_RespuestasRubrica", Storage="_RespuestasRubrica", ThisKey="EvaluacionId", OtherKey="EvaluacionId")]
		public EntitySet<RespuestasRubrica> RespuestasRubrica
		{
			get
			{
				return this._RespuestasRubrica;
			}
			set
			{
				this._RespuestasRubrica.Assign(value);
			}
		}
		
		[Association(Name="Evaluaciones_ResultadosRubricas", Storage="_ResultadosRubricas", ThisKey="EvaluacionId", OtherKey="EvaluacionId", IsUnique=true, IsForeignKey=false)]
		public ResultadosRubricas ResultadosRubricas
		{
			get
			{
				return this._ResultadosRubricas.Entity;
			}
			set
			{
				ResultadosRubricas previousValue = this._ResultadosRubricas.Entity;
				if (((previousValue != value) 
							|| (this._ResultadosRubricas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResultadosRubricas.Entity = null;
						previousValue.Evaluaciones = null;
					}
					this._ResultadosRubricas.Entity = value;
					if ((value != null))
					{
						value.Evaluaciones = this;
					}
					this.SendPropertyChanged("ResultadosRubricas");
				}
			}
		}
		
		[Association(Name="VersionesRubricas_Evaluaciones", Storage="_VersionesRubricas", ThisKey="TipoArtefacto,RubricaId,Version", OtherKey="TipoArtefacto,RubricaId,Version", IsForeignKey=true)]
		public VersionesRubricas VersionesRubricas
		{
			get
			{
				return this._VersionesRubricas.Entity;
			}
			set
			{
				VersionesRubricas previousValue = this._VersionesRubricas.Entity;
				if (((previousValue != value) 
							|| (this._VersionesRubricas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VersionesRubricas.Entity = null;
						previousValue.Evaluaciones.Remove(this);
					}
					this._VersionesRubricas.Entity = value;
					if ((value != null))
					{
						value.Evaluaciones.Add(this);
						this._TipoArtefacto = value.TipoArtefacto;
						this._RubricaId = value.RubricaId;
						this._Version = value.Version;
					}
					else
					{
						this._TipoArtefacto = default(string);
						this._RubricaId = default(string);
						this._Version = default(string);
					}
					this.SendPropertyChanged("VersionesRubricas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RespuestasRubrica(RespuestasRubrica entity)
		{
			this.SendPropertyChanging();
			entity.Evaluaciones = this;
		}
		
		private void detach_RespuestasRubrica(RespuestasRubrica entity)
		{
			this.SendPropertyChanging();
			entity.Evaluaciones = null;
		}
	}
	
	[Table(Name="RUBRICON.RespuestasRubrica")]
	public partial class RespuestasRubrica : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluacionId;
		
		private int _CriterioRubricaId;
		
		private EntityRef<CriterioRubrica> _CriterioRubrica;
		
		private EntityRef<Evaluaciones> _Evaluaciones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluacionIdChanging(int value);
    partial void OnEvaluacionIdChanged();
    partial void OnCriterioRubricaIdChanging(int value);
    partial void OnCriterioRubricaIdChanged();
    #endregion
		
		public RespuestasRubrica()
		{
			this._CriterioRubrica = default(EntityRef<CriterioRubrica>);
			this._Evaluaciones = default(EntityRef<Evaluaciones>);
			OnCreated();
		}
		
		[Column(Storage="_EvaluacionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EvaluacionId
		{
			get
			{
				return this._EvaluacionId;
			}
			set
			{
				if ((this._EvaluacionId != value))
				{
					if (this._Evaluaciones.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluacionIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluacionId = value;
					this.SendPropertyChanged("EvaluacionId");
					this.OnEvaluacionIdChanged();
				}
			}
		}
		
		[Column(Storage="_CriterioRubricaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CriterioRubricaId
		{
			get
			{
				return this._CriterioRubricaId;
			}
			set
			{
				if ((this._CriterioRubricaId != value))
				{
					if (this._CriterioRubrica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCriterioRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._CriterioRubricaId = value;
					this.SendPropertyChanged("CriterioRubricaId");
					this.OnCriterioRubricaIdChanged();
				}
			}
		}
		
		[Association(Name="CriterioRubrica_RespuestasRubrica", Storage="_CriterioRubrica", ThisKey="CriterioRubricaId", OtherKey="CriterioRubricaId", IsForeignKey=true)]
		public CriterioRubrica CriterioRubrica
		{
			get
			{
				return this._CriterioRubrica.Entity;
			}
			set
			{
				CriterioRubrica previousValue = this._CriterioRubrica.Entity;
				if (((previousValue != value) 
							|| (this._CriterioRubrica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CriterioRubrica.Entity = null;
						previousValue.RespuestasRubrica.Remove(this);
					}
					this._CriterioRubrica.Entity = value;
					if ((value != null))
					{
						value.RespuestasRubrica.Add(this);
						this._CriterioRubricaId = value.CriterioRubricaId;
					}
					else
					{
						this._CriterioRubricaId = default(int);
					}
					this.SendPropertyChanged("CriterioRubrica");
				}
			}
		}
		
		[Association(Name="Evaluaciones_RespuestasRubrica", Storage="_Evaluaciones", ThisKey="EvaluacionId", OtherKey="EvaluacionId", IsForeignKey=true)]
		public Evaluaciones Evaluaciones
		{
			get
			{
				return this._Evaluaciones.Entity;
			}
			set
			{
				Evaluaciones previousValue = this._Evaluaciones.Entity;
				if (((previousValue != value) 
							|| (this._Evaluaciones.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluaciones.Entity = null;
						previousValue.RespuestasRubrica.Remove(this);
					}
					this._Evaluaciones.Entity = value;
					if ((value != null))
					{
						value.RespuestasRubrica.Add(this);
						this._EvaluacionId = value.EvaluacionId;
					}
					else
					{
						this._EvaluacionId = default(int);
					}
					this.SendPropertyChanged("Evaluaciones");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="RUBRICON.ResultadosRubricas")]
	public partial class ResultadosRubricas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluacionId;
		
		private string _Resultado;
		
		private EntityRef<Evaluaciones> _Evaluaciones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluacionIdChanging(int value);
    partial void OnEvaluacionIdChanged();
    partial void OnResultadoChanging(string value);
    partial void OnResultadoChanged();
    #endregion
		
		public ResultadosRubricas()
		{
			this._Evaluaciones = default(EntityRef<Evaluaciones>);
			OnCreated();
		}
		
		[Column(Storage="_EvaluacionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EvaluacionId
		{
			get
			{
				return this._EvaluacionId;
			}
			set
			{
				if ((this._EvaluacionId != value))
				{
					if (this._Evaluaciones.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluacionIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluacionId = value;
					this.SendPropertyChanged("EvaluacionId");
					this.OnEvaluacionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Resultado", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Resultado
		{
			get
			{
				return this._Resultado;
			}
			set
			{
				if ((this._Resultado != value))
				{
					this.OnResultadoChanging(value);
					this.SendPropertyChanging();
					this._Resultado = value;
					this.SendPropertyChanged("Resultado");
					this.OnResultadoChanged();
				}
			}
		}
		
		[Association(Name="Evaluaciones_ResultadosRubricas", Storage="_Evaluaciones", ThisKey="EvaluacionId", OtherKey="EvaluacionId", IsForeignKey=true)]
		public Evaluaciones Evaluaciones
		{
			get
			{
				return this._Evaluaciones.Entity;
			}
			set
			{
				Evaluaciones previousValue = this._Evaluaciones.Entity;
				if (((previousValue != value) 
							|| (this._Evaluaciones.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluaciones.Entity = null;
						previousValue.ResultadosRubricas = null;
					}
					this._Evaluaciones.Entity = value;
					if ((value != null))
					{
						value.ResultadosRubricas = this;
						this._EvaluacionId = value.EvaluacionId;
					}
					else
					{
						this._EvaluacionId = default(int);
					}
					this.SendPropertyChanged("Evaluaciones");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="RUBRICON.Rubricas")]
	public partial class Rubricas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RubricaId;
		
		private string _TipoArtefacto;
		
		private EntitySet<VersionesRubricas> _VersionesRubricas;
		
		private EntityRef<TiposArtefacto> _TiposArtefacto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricaIdChanging(string value);
    partial void OnRubricaIdChanged();
    partial void OnTipoArtefactoChanging(string value);
    partial void OnTipoArtefactoChanged();
    #endregion
		
		public Rubricas()
		{
			this._VersionesRubricas = new EntitySet<VersionesRubricas>(new Action<VersionesRubricas>(this.attach_VersionesRubricas), new Action<VersionesRubricas>(this.detach_VersionesRubricas));
			this._TiposArtefacto = default(EntityRef<TiposArtefacto>);
			OnCreated();
		}
		
		[Column(Storage="_RubricaId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_TipoArtefacto", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TipoArtefacto
		{
			get
			{
				return this._TipoArtefacto;
			}
			set
			{
				if ((this._TipoArtefacto != value))
				{
					if (this._TiposArtefacto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoArtefactoChanging(value);
					this.SendPropertyChanging();
					this._TipoArtefacto = value;
					this.SendPropertyChanged("TipoArtefacto");
					this.OnTipoArtefactoChanged();
				}
			}
		}
		
		[Association(Name="Rubricas_VersionesRubricas", Storage="_VersionesRubricas", ThisKey="RubricaId,TipoArtefacto", OtherKey="RubricaId,TipoArtefacto")]
		public EntitySet<VersionesRubricas> VersionesRubricas
		{
			get
			{
				return this._VersionesRubricas;
			}
			set
			{
				this._VersionesRubricas.Assign(value);
			}
		}
		
		[Association(Name="TiposArtefacto_Rubricas", Storage="_TiposArtefacto", ThisKey="TipoArtefacto", OtherKey="TipoArtefacto", IsForeignKey=true)]
		public TiposArtefacto TiposArtefacto
		{
			get
			{
				return this._TiposArtefacto.Entity;
			}
			set
			{
				TiposArtefacto previousValue = this._TiposArtefacto.Entity;
				if (((previousValue != value) 
							|| (this._TiposArtefacto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TiposArtefacto.Entity = null;
						previousValue.Rubricas.Remove(this);
					}
					this._TiposArtefacto.Entity = value;
					if ((value != null))
					{
						value.Rubricas.Add(this);
						this._TipoArtefacto = value.TipoArtefacto;
					}
					else
					{
						this._TipoArtefacto = default(string);
					}
					this.SendPropertyChanged("TiposArtefacto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VersionesRubricas(VersionesRubricas entity)
		{
			this.SendPropertyChanging();
			entity.Rubricas = this;
		}
		
		private void detach_VersionesRubricas(VersionesRubricas entity)
		{
			this.SendPropertyChanging();
			entity.Rubricas = null;
		}
	}
	
	[Table(Name="RUBRICON.TiposArtefacto")]
	public partial class TiposArtefacto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TipoArtefacto;
		
		private string _Descripcion;
		
		private EntitySet<Rubricas> _Rubricas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTipoArtefactoChanging(string value);
    partial void OnTipoArtefactoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TiposArtefacto()
		{
			this._Rubricas = new EntitySet<Rubricas>(new Action<Rubricas>(this.attach_Rubricas), new Action<Rubricas>(this.detach_Rubricas));
			OnCreated();
		}
		
		[Column(Storage="_TipoArtefacto", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TipoArtefacto
		{
			get
			{
				return this._TipoArtefacto;
			}
			set
			{
				if ((this._TipoArtefacto != value))
				{
					this.OnTipoArtefactoChanging(value);
					this.SendPropertyChanging();
					this._TipoArtefacto = value;
					this.SendPropertyChanged("TipoArtefacto");
					this.OnTipoArtefactoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TiposArtefacto_Rubricas", Storage="_Rubricas", ThisKey="TipoArtefacto", OtherKey="TipoArtefacto")]
		public EntitySet<Rubricas> Rubricas
		{
			get
			{
				return this._Rubricas;
			}
			set
			{
				this._Rubricas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rubricas(Rubricas entity)
		{
			this.SendPropertyChanging();
			entity.TiposArtefacto = this;
		}
		
		private void detach_Rubricas(Rubricas entity)
		{
			this.SendPropertyChanging();
			entity.TiposArtefacto = null;
		}
	}
}
#pragma warning restore 1591
