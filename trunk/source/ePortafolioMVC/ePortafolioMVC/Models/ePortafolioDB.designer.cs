#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ePortafolioMVC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="db_portafolio")]
	public partial class ePortafolioDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTrabajosResultadosPrograma(TrabajosResultadosPrograma instance);
    partial void UpdateTrabajosResultadosPrograma(TrabajosResultadosPrograma instance);
    partial void DeleteTrabajosResultadosPrograma(TrabajosResultadosPrograma instance);
    partial void InsertAlumnosCurso(AlumnosCurso instance);
    partial void UpdateAlumnosCurso(AlumnosCurso instance);
    partial void DeleteAlumnosCurso(AlumnosCurso instance);
    partial void InsertAlumnosGrupo(AlumnosGrupo instance);
    partial void UpdateAlumnosGrupo(AlumnosGrupo instance);
    partial void DeleteAlumnosGrupo(AlumnosGrupo instance);
    partial void InsertArchivo(Archivo instance);
    partial void UpdateArchivo(Archivo instance);
    partial void DeleteArchivo(Archivo instance);
    partial void InsertArchivosGrupo(ArchivosGrupo instance);
    partial void UpdateArchivosGrupo(ArchivosGrupo instance);
    partial void DeleteArchivosGrupo(ArchivosGrupo instance);
    partial void InsertCriteriosRubrica(CriteriosRubrica instance);
    partial void UpdateCriteriosRubrica(CriteriosRubrica instance);
    partial void DeleteCriteriosRubrica(CriteriosRubrica instance);
    partial void InsertCurso(Curso instance);
    partial void UpdateCurso(Curso instance);
    partial void DeleteCurso(Curso instance);
    partial void InsertProfesore(Profesore instance);
    partial void UpdateProfesore(Profesore instance);
    partial void DeleteProfesore(Profesore instance);
    partial void InsertResultadosPrograma(ResultadosPrograma instance);
    partial void UpdateResultadosPrograma(ResultadosPrograma instance);
    partial void DeleteResultadosPrograma(ResultadosPrograma instance);
    partial void InsertRubrica(Rubrica instance);
    partial void UpdateRubrica(Rubrica instance);
    partial void DeleteRubrica(Rubrica instance);
    partial void InsertRubricasTrabajo(RubricasTrabajo instance);
    partial void UpdateRubricasTrabajo(RubricasTrabajo instance);
    partial void DeleteRubricasTrabajo(RubricasTrabajo instance);
    partial void InsertTrabajo(Trabajo instance);
    partial void UpdateTrabajo(Trabajo instance);
    partial void DeleteTrabajo(Trabajo instance);
    partial void InsertResultadosRubricaGrupo(ResultadosRubricaGrupo instance);
    partial void UpdateResultadosRubricaGrupo(ResultadosRubricaGrupo instance);
    partial void DeleteResultadosRubricaGrupo(ResultadosRubricaGrupo instance);
    partial void InsertGrupo(Grupo instance);
    partial void UpdateGrupo(Grupo instance);
    partial void DeleteGrupo(Grupo instance);
    partial void InsertAlumno(Alumno instance);
    partial void UpdateAlumno(Alumno instance);
    partial void DeleteAlumno(Alumno instance);
    #endregion
		
		public ePortafolioDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["db_portafolioConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ePortafolioDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ePortafolioDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ePortafolioDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ePortafolioDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TrabajosResultadosPrograma> TrabajosResultadosProgramas
		{
			get
			{
				return this.GetTable<TrabajosResultadosPrograma>();
			}
		}
		
		public System.Data.Linq.Table<AlumnosCurso> AlumnosCursos
		{
			get
			{
				return this.GetTable<AlumnosCurso>();
			}
		}
		
		public System.Data.Linq.Table<AlumnosGrupo> AlumnosGrupos
		{
			get
			{
				return this.GetTable<AlumnosGrupo>();
			}
		}
		
		public System.Data.Linq.Table<Archivo> Archivos
		{
			get
			{
				return this.GetTable<Archivo>();
			}
		}
		
		public System.Data.Linq.Table<ArchivosGrupo> ArchivosGrupos
		{
			get
			{
				return this.GetTable<ArchivosGrupo>();
			}
		}
		
		public System.Data.Linq.Table<CriteriosRubrica> CriteriosRubricas
		{
			get
			{
				return this.GetTable<CriteriosRubrica>();
			}
		}
		
		public System.Data.Linq.Table<Curso> Cursos
		{
			get
			{
				return this.GetTable<Curso>();
			}
		}
		
		public System.Data.Linq.Table<Profesore> Profesores
		{
			get
			{
				return this.GetTable<Profesore>();
			}
		}
		
		public System.Data.Linq.Table<ResultadosPrograma> ResultadosProgramas
		{
			get
			{
				return this.GetTable<ResultadosPrograma>();
			}
		}
		
		public System.Data.Linq.Table<Rubrica> Rubricas
		{
			get
			{
				return this.GetTable<Rubrica>();
			}
		}
		
		public System.Data.Linq.Table<RubricasTrabajo> RubricasTrabajos
		{
			get
			{
				return this.GetTable<RubricasTrabajo>();
			}
		}
		
		public System.Data.Linq.Table<Trabajo> Trabajos
		{
			get
			{
				return this.GetTable<Trabajo>();
			}
		}
		
		public System.Data.Linq.Table<ResultadosRubricaGrupo> ResultadosRubricaGrupos
		{
			get
			{
				return this.GetTable<ResultadosRubricaGrupo>();
			}
		}
		
		public System.Data.Linq.Table<Grupo> Grupos
		{
			get
			{
				return this.GetTable<Grupo>();
			}
		}
		
		public System.Data.Linq.Table<Alumno> Alumnos
		{
			get
			{
				return this.GetTable<Alumno>();
			}
		}
	}
	
	[Table(Name="dbo.TrabajosResultadosPrograma")]
	public partial class TrabajosResultadosPrograma : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrabajoId;
		
		private int _ResultadoProgramaId;
		
		private EntityRef<ResultadosPrograma> _ResultadosPrograma;
		
		private EntityRef<Trabajo> _Trabajo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrabajoIdChanging(int value);
    partial void OnTrabajoIdChanged();
    partial void OnResultadoProgramaIdChanging(int value);
    partial void OnResultadoProgramaIdChanged();
    #endregion
		
		public TrabajosResultadosPrograma()
		{
			this._ResultadosPrograma = default(EntityRef<ResultadosPrograma>);
			this._Trabajo = default(EntityRef<Trabajo>);
			OnCreated();
		}
		
		[Column(Storage="_TrabajoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrabajoId
		{
			get
			{
				return this._TrabajoId;
			}
			set
			{
				if ((this._TrabajoId != value))
				{
					if (this._Trabajo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrabajoIdChanging(value);
					this.SendPropertyChanging();
					this._TrabajoId = value;
					this.SendPropertyChanged("TrabajoId");
					this.OnTrabajoIdChanged();
				}
			}
		}
		
		[Column(Storage="_ResultadoProgramaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResultadoProgramaId
		{
			get
			{
				return this._ResultadoProgramaId;
			}
			set
			{
				if ((this._ResultadoProgramaId != value))
				{
					if (this._ResultadosPrograma.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultadoProgramaIdChanging(value);
					this.SendPropertyChanging();
					this._ResultadoProgramaId = value;
					this.SendPropertyChanged("ResultadoProgramaId");
					this.OnResultadoProgramaIdChanged();
				}
			}
		}
		
		[Association(Name="ResultadosPrograma_TrabajosResultadosPrograma", Storage="_ResultadosPrograma", ThisKey="ResultadoProgramaId", OtherKey="ResultadoProgramaId", IsForeignKey=true)]
		public ResultadosPrograma ResultadosPrograma
		{
			get
			{
				return this._ResultadosPrograma.Entity;
			}
			set
			{
				ResultadosPrograma previousValue = this._ResultadosPrograma.Entity;
				if (((previousValue != value) 
							|| (this._ResultadosPrograma.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResultadosPrograma.Entity = null;
						previousValue.TrabajosResultadosProgramas.Remove(this);
					}
					this._ResultadosPrograma.Entity = value;
					if ((value != null))
					{
						value.TrabajosResultadosProgramas.Add(this);
						this._ResultadoProgramaId = value.ResultadoProgramaId;
					}
					else
					{
						this._ResultadoProgramaId = default(int);
					}
					this.SendPropertyChanged("ResultadosPrograma");
				}
			}
		}
		
		[Association(Name="Trabajo_TrabajosResultadosPrograma", Storage="_Trabajo", ThisKey="TrabajoId", OtherKey="TrabajoId", IsForeignKey=true)]
		public Trabajo Trabajo
		{
			get
			{
				return this._Trabajo.Entity;
			}
			set
			{
				Trabajo previousValue = this._Trabajo.Entity;
				if (((previousValue != value) 
							|| (this._Trabajo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trabajo.Entity = null;
						previousValue.TrabajosResultadosProgramas.Remove(this);
					}
					this._Trabajo.Entity = value;
					if ((value != null))
					{
						value.TrabajosResultadosProgramas.Add(this);
						this._TrabajoId = value.TrabajoId;
					}
					else
					{
						this._TrabajoId = default(int);
					}
					this.SendPropertyChanged("Trabajo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AlumnosCurso")]
	public partial class AlumnosCurso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AlumnoId;
		
		private string _CursoId;
		
		private EntityRef<Curso> _Curso;
		
		private EntityRef<Alumno> _Alumno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlumnoIdChanging(string value);
    partial void OnAlumnoIdChanged();
    partial void OnCursoIdChanging(string value);
    partial void OnCursoIdChanged();
    #endregion
		
		public AlumnosCurso()
		{
			this._Curso = default(EntityRef<Curso>);
			this._Alumno = default(EntityRef<Alumno>);
			OnCreated();
		}
		
		[Column(Storage="_AlumnoId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AlumnoId
		{
			get
			{
				return this._AlumnoId;
			}
			set
			{
				if ((this._AlumnoId != value))
				{
					if (this._Alumno.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumnoIdChanging(value);
					this.SendPropertyChanging();
					this._AlumnoId = value;
					this.SendPropertyChanged("AlumnoId");
					this.OnAlumnoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CursoId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CursoId
		{
			get
			{
				return this._CursoId;
			}
			set
			{
				if ((this._CursoId != value))
				{
					if (this._Curso.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCursoIdChanging(value);
					this.SendPropertyChanging();
					this._CursoId = value;
					this.SendPropertyChanged("CursoId");
					this.OnCursoIdChanged();
				}
			}
		}
		
		[Association(Name="Curso_AlumnosCurso", Storage="_Curso", ThisKey="CursoId", OtherKey="CursoId", IsForeignKey=true)]
		public Curso Curso
		{
			get
			{
				return this._Curso.Entity;
			}
			set
			{
				Curso previousValue = this._Curso.Entity;
				if (((previousValue != value) 
							|| (this._Curso.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curso.Entity = null;
						previousValue.AlumnosCursos.Remove(this);
					}
					this._Curso.Entity = value;
					if ((value != null))
					{
						value.AlumnosCursos.Add(this);
						this._CursoId = value.CursoId;
					}
					else
					{
						this._CursoId = default(string);
					}
					this.SendPropertyChanged("Curso");
				}
			}
		}
		
		[Association(Name="Alumno_AlumnosCurso", Storage="_Alumno", ThisKey="AlumnoId", OtherKey="AlumnoId", IsForeignKey=true)]
		public Alumno Alumno
		{
			get
			{
				return this._Alumno.Entity;
			}
			set
			{
				Alumno previousValue = this._Alumno.Entity;
				if (((previousValue != value) 
							|| (this._Alumno.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumno.Entity = null;
						previousValue.AlumnosCursos.Remove(this);
					}
					this._Alumno.Entity = value;
					if ((value != null))
					{
						value.AlumnosCursos.Add(this);
						this._AlumnoId = value.AlumnoId;
					}
					else
					{
						this._AlumnoId = default(string);
					}
					this.SendPropertyChanged("Alumno");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AlumnosGrupo")]
	public partial class AlumnosGrupo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AlumnoId;
		
		private int _GrupoId;
		
		private bool _EsLider;
		
		private EntityRef<Grupo> _Grupo;
		
		private EntityRef<Alumno> _Alumno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlumnoIdChanging(string value);
    partial void OnAlumnoIdChanged();
    partial void OnGrupoIdChanging(int value);
    partial void OnGrupoIdChanged();
    partial void OnEsLiderChanging(bool value);
    partial void OnEsLiderChanged();
    #endregion
		
		public AlumnosGrupo()
		{
			this._Grupo = default(EntityRef<Grupo>);
			this._Alumno = default(EntityRef<Alumno>);
			OnCreated();
		}
		
		[Column(Storage="_AlumnoId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AlumnoId
		{
			get
			{
				return this._AlumnoId;
			}
			set
			{
				if ((this._AlumnoId != value))
				{
					if (this._Alumno.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumnoIdChanging(value);
					this.SendPropertyChanging();
					this._AlumnoId = value;
					this.SendPropertyChanged("AlumnoId");
					this.OnAlumnoIdChanged();
				}
			}
		}
		
		[Column(Storage="_GrupoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GrupoId
		{
			get
			{
				return this._GrupoId;
			}
			set
			{
				if ((this._GrupoId != value))
				{
					if (this._Grupo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrupoIdChanging(value);
					this.SendPropertyChanging();
					this._GrupoId = value;
					this.SendPropertyChanged("GrupoId");
					this.OnGrupoIdChanged();
				}
			}
		}
		
		[Column(Storage="_EsLider", DbType="Bit NOT NULL")]
		public bool EsLider
		{
			get
			{
				return this._EsLider;
			}
			set
			{
				if ((this._EsLider != value))
				{
					this.OnEsLiderChanging(value);
					this.SendPropertyChanging();
					this._EsLider = value;
					this.SendPropertyChanged("EsLider");
					this.OnEsLiderChanged();
				}
			}
		}
		
		[Association(Name="Grupo_AlumnosGrupo", Storage="_Grupo", ThisKey="GrupoId", OtherKey="GrupoId", IsForeignKey=true)]
		public Grupo Grupo
		{
			get
			{
				return this._Grupo.Entity;
			}
			set
			{
				Grupo previousValue = this._Grupo.Entity;
				if (((previousValue != value) 
							|| (this._Grupo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grupo.Entity = null;
						previousValue.AlumnosGrupos.Remove(this);
					}
					this._Grupo.Entity = value;
					if ((value != null))
					{
						value.AlumnosGrupos.Add(this);
						this._GrupoId = value.GrupoId;
					}
					else
					{
						this._GrupoId = default(int);
					}
					this.SendPropertyChanged("Grupo");
				}
			}
		}
		
		[Association(Name="Alumno_AlumnosGrupo", Storage="_Alumno", ThisKey="AlumnoId", OtherKey="AlumnoId", IsForeignKey=true)]
		public Alumno Alumno
		{
			get
			{
				return this._Alumno.Entity;
			}
			set
			{
				Alumno previousValue = this._Alumno.Entity;
				if (((previousValue != value) 
							|| (this._Alumno.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumno.Entity = null;
						previousValue.AlumnosGrupos.Remove(this);
					}
					this._Alumno.Entity = value;
					if ((value != null))
					{
						value.AlumnosGrupos.Add(this);
						this._AlumnoId = value.AlumnoId;
					}
					else
					{
						this._AlumnoId = default(string);
					}
					this.SendPropertyChanged("Alumno");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Archivos")]
	public partial class Archivo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArchivoId;
		
		private string _Ruta;
		
		private string _Nombre;
		
		private System.Nullable<int> _TipoArchivoId;
		
		private string _AlumnoId;
		
		private System.Nullable<System.DateTime> _FechaSubida;
		
		private string _Extension;
		
		private EntitySet<ArchivosGrupo> _ArchivosGrupos;
		
		private EntityRef<Alumno> _Alumno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivoIdChanging(int value);
    partial void OnArchivoIdChanged();
    partial void OnRutaChanging(string value);
    partial void OnRutaChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnTipoArchivoIdChanging(System.Nullable<int> value);
    partial void OnTipoArchivoIdChanged();
    partial void OnAlumnoIdChanging(string value);
    partial void OnAlumnoIdChanged();
    partial void OnFechaSubidaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaSubidaChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    #endregion
		
		public Archivo()
		{
			this._ArchivosGrupos = new EntitySet<ArchivosGrupo>(new Action<ArchivosGrupo>(this.attach_ArchivosGrupos), new Action<ArchivosGrupo>(this.detach_ArchivosGrupos));
			this._Alumno = default(EntityRef<Alumno>);
			OnCreated();
		}
		
		[Column(Storage="_ArchivoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArchivoId
		{
			get
			{
				return this._ArchivoId;
			}
			set
			{
				if ((this._ArchivoId != value))
				{
					this.OnArchivoIdChanging(value);
					this.SendPropertyChanging();
					this._ArchivoId = value;
					this.SendPropertyChanged("ArchivoId");
					this.OnArchivoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Ruta", DbType="VarChar(1000)")]
		public string Ruta
		{
			get
			{
				return this._Ruta;
			}
			set
			{
				if ((this._Ruta != value))
				{
					this.OnRutaChanging(value);
					this.SendPropertyChanging();
					this._Ruta = value;
					this.SendPropertyChanged("Ruta");
					this.OnRutaChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(200)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_TipoArchivoId", DbType="Int")]
		public System.Nullable<int> TipoArchivoId
		{
			get
			{
				return this._TipoArchivoId;
			}
			set
			{
				if ((this._TipoArchivoId != value))
				{
					this.OnTipoArchivoIdChanging(value);
					this.SendPropertyChanging();
					this._TipoArchivoId = value;
					this.SendPropertyChanged("TipoArchivoId");
					this.OnTipoArchivoIdChanged();
				}
			}
		}
		
		[Column(Storage="_AlumnoId", DbType="VarChar(10)")]
		public string AlumnoId
		{
			get
			{
				return this._AlumnoId;
			}
			set
			{
				if ((this._AlumnoId != value))
				{
					if (this._Alumno.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumnoIdChanging(value);
					this.SendPropertyChanging();
					this._AlumnoId = value;
					this.SendPropertyChanged("AlumnoId");
					this.OnAlumnoIdChanged();
				}
			}
		}
		
		[Column(Storage="_FechaSubida", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaSubida
		{
			get
			{
				return this._FechaSubida;
			}
			set
			{
				if ((this._FechaSubida != value))
				{
					this.OnFechaSubidaChanging(value);
					this.SendPropertyChanging();
					this._FechaSubida = value;
					this.SendPropertyChanged("FechaSubida");
					this.OnFechaSubidaChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="VarChar(50)")]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Association(Name="Archivo_ArchivosGrupo", Storage="_ArchivosGrupos", ThisKey="ArchivoId", OtherKey="ArchivoId")]
		public EntitySet<ArchivosGrupo> ArchivosGrupos
		{
			get
			{
				return this._ArchivosGrupos;
			}
			set
			{
				this._ArchivosGrupos.Assign(value);
			}
		}
		
		[Association(Name="Alumno_Archivo", Storage="_Alumno", ThisKey="AlumnoId", OtherKey="AlumnoId", IsForeignKey=true)]
		public Alumno Alumno
		{
			get
			{
				return this._Alumno.Entity;
			}
			set
			{
				Alumno previousValue = this._Alumno.Entity;
				if (((previousValue != value) 
							|| (this._Alumno.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumno.Entity = null;
						previousValue.Archivos.Remove(this);
					}
					this._Alumno.Entity = value;
					if ((value != null))
					{
						value.Archivos.Add(this);
						this._AlumnoId = value.AlumnoId;
					}
					else
					{
						this._AlumnoId = default(string);
					}
					this.SendPropertyChanged("Alumno");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchivosGrupos(ArchivosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Archivo = this;
		}
		
		private void detach_ArchivosGrupos(ArchivosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Archivo = null;
		}
	}
	
	[Table(Name="dbo.ArchivosGrupo")]
	public partial class ArchivosGrupo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArchivoId;
		
		private int _GrupoId;
		
		private EntityRef<Archivo> _Archivo;
		
		private EntityRef<Grupo> _Grupo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivoIdChanging(int value);
    partial void OnArchivoIdChanged();
    partial void OnGrupoIdChanging(int value);
    partial void OnGrupoIdChanged();
    #endregion
		
		public ArchivosGrupo()
		{
			this._Archivo = default(EntityRef<Archivo>);
			this._Grupo = default(EntityRef<Grupo>);
			OnCreated();
		}
		
		[Column(Storage="_ArchivoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArchivoId
		{
			get
			{
				return this._ArchivoId;
			}
			set
			{
				if ((this._ArchivoId != value))
				{
					if (this._Archivo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchivoIdChanging(value);
					this.SendPropertyChanging();
					this._ArchivoId = value;
					this.SendPropertyChanged("ArchivoId");
					this.OnArchivoIdChanged();
				}
			}
		}
		
		[Column(Storage="_GrupoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GrupoId
		{
			get
			{
				return this._GrupoId;
			}
			set
			{
				if ((this._GrupoId != value))
				{
					if (this._Grupo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrupoIdChanging(value);
					this.SendPropertyChanging();
					this._GrupoId = value;
					this.SendPropertyChanged("GrupoId");
					this.OnGrupoIdChanged();
				}
			}
		}
		
		[Association(Name="Archivo_ArchivosGrupo", Storage="_Archivo", ThisKey="ArchivoId", OtherKey="ArchivoId", IsForeignKey=true)]
		public Archivo Archivo
		{
			get
			{
				return this._Archivo.Entity;
			}
			set
			{
				Archivo previousValue = this._Archivo.Entity;
				if (((previousValue != value) 
							|| (this._Archivo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archivo.Entity = null;
						previousValue.ArchivosGrupos.Remove(this);
					}
					this._Archivo.Entity = value;
					if ((value != null))
					{
						value.ArchivosGrupos.Add(this);
						this._ArchivoId = value.ArchivoId;
					}
					else
					{
						this._ArchivoId = default(int);
					}
					this.SendPropertyChanged("Archivo");
				}
			}
		}
		
		[Association(Name="Grupo_ArchivosGrupo", Storage="_Grupo", ThisKey="GrupoId", OtherKey="GrupoId", IsForeignKey=true)]
		public Grupo Grupo
		{
			get
			{
				return this._Grupo.Entity;
			}
			set
			{
				Grupo previousValue = this._Grupo.Entity;
				if (((previousValue != value) 
							|| (this._Grupo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grupo.Entity = null;
						previousValue.ArchivosGrupos.Remove(this);
					}
					this._Grupo.Entity = value;
					if ((value != null))
					{
						value.ArchivosGrupos.Add(this);
						this._GrupoId = value.GrupoId;
					}
					else
					{
						this._GrupoId = default(int);
					}
					this.SendPropertyChanged("Grupo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CriteriosRubrica")]
	public partial class CriteriosRubrica : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CriterioId;
		
		private int _RubricaId;
		
		private string _Nombre;
		
		private decimal _Valor;
		
		private EntitySet<ResultadosRubricaGrupo> _ResultadosRubricaGrupos;
		
		private EntityRef<Rubrica> _Rubrica;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCriterioIdChanging(int value);
    partial void OnCriterioIdChanged();
    partial void OnRubricaIdChanging(int value);
    partial void OnRubricaIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnValorChanging(decimal value);
    partial void OnValorChanged();
    #endregion
		
		public CriteriosRubrica()
		{
			this._ResultadosRubricaGrupos = new EntitySet<ResultadosRubricaGrupo>(new Action<ResultadosRubricaGrupo>(this.attach_ResultadosRubricaGrupos), new Action<ResultadosRubricaGrupo>(this.detach_ResultadosRubricaGrupos));
			this._Rubrica = default(EntityRef<Rubrica>);
			OnCreated();
		}
		
		[Column(Storage="_CriterioId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CriterioId
		{
			get
			{
				return this._CriterioId;
			}
			set
			{
				if ((this._CriterioId != value))
				{
					this.OnCriterioIdChanging(value);
					this.SendPropertyChanging();
					this._CriterioId = value;
					this.SendPropertyChanged("CriterioId");
					this.OnCriterioIdChanged();
				}
			}
		}
		
		[Column(Storage="_RubricaId", DbType="Int NOT NULL")]
		public int RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					if (this._Rubrica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Valor", DbType="Money NOT NULL")]
		public decimal Valor
		{
			get
			{
				return this._Valor;
			}
			set
			{
				if ((this._Valor != value))
				{
					this.OnValorChanging(value);
					this.SendPropertyChanging();
					this._Valor = value;
					this.SendPropertyChanged("Valor");
					this.OnValorChanged();
				}
			}
		}
		
		[Association(Name="CriteriosRubrica_ResultadosRubricaGrupo", Storage="_ResultadosRubricaGrupos", ThisKey="CriterioId", OtherKey="CriterioId")]
		public EntitySet<ResultadosRubricaGrupo> ResultadosRubricaGrupos
		{
			get
			{
				return this._ResultadosRubricaGrupos;
			}
			set
			{
				this._ResultadosRubricaGrupos.Assign(value);
			}
		}
		
		[Association(Name="Rubrica_CriteriosRubrica", Storage="_Rubrica", ThisKey="RubricaId", OtherKey="RubricaId", IsForeignKey=true)]
		public Rubrica Rubrica
		{
			get
			{
				return this._Rubrica.Entity;
			}
			set
			{
				Rubrica previousValue = this._Rubrica.Entity;
				if (((previousValue != value) 
							|| (this._Rubrica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rubrica.Entity = null;
						previousValue.CriteriosRubricas.Remove(this);
					}
					this._Rubrica.Entity = value;
					if ((value != null))
					{
						value.CriteriosRubricas.Add(this);
						this._RubricaId = value.RubricaId;
					}
					else
					{
						this._RubricaId = default(int);
					}
					this.SendPropertyChanged("Rubrica");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResultadosRubricaGrupos(ResultadosRubricaGrupo entity)
		{
			this.SendPropertyChanging();
			entity.CriteriosRubrica = this;
		}
		
		private void detach_ResultadosRubricaGrupos(ResultadosRubricaGrupo entity)
		{
			this.SendPropertyChanging();
			entity.CriteriosRubrica = null;
		}
	}
	
	[Table(Name="dbo.Cursos")]
	public partial class Curso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CursoId;
		
		private string _Nombre;
		
		private string _ProfesorId;
		
		private EntitySet<AlumnosCurso> _AlumnosCursos;
		
		private EntitySet<Trabajo> _Trabajos;
		
		private EntityRef<Profesore> _Profesore;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCursoIdChanging(string value);
    partial void OnCursoIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnProfesorIdChanging(string value);
    partial void OnProfesorIdChanged();
    #endregion
		
		public Curso()
		{
			this._AlumnosCursos = new EntitySet<AlumnosCurso>(new Action<AlumnosCurso>(this.attach_AlumnosCursos), new Action<AlumnosCurso>(this.detach_AlumnosCursos));
			this._Trabajos = new EntitySet<Trabajo>(new Action<Trabajo>(this.attach_Trabajos), new Action<Trabajo>(this.detach_Trabajos));
			this._Profesore = default(EntityRef<Profesore>);
			OnCreated();
		}
		
		[Column(Storage="_CursoId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CursoId
		{
			get
			{
				return this._CursoId;
			}
			set
			{
				if ((this._CursoId != value))
				{
					this.OnCursoIdChanging(value);
					this.SendPropertyChanging();
					this._CursoId = value;
					this.SendPropertyChanged("CursoId");
					this.OnCursoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_ProfesorId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ProfesorId
		{
			get
			{
				return this._ProfesorId;
			}
			set
			{
				if ((this._ProfesorId != value))
				{
					if (this._Profesore.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfesorIdChanging(value);
					this.SendPropertyChanging();
					this._ProfesorId = value;
					this.SendPropertyChanged("ProfesorId");
					this.OnProfesorIdChanged();
				}
			}
		}
		
		[Association(Name="Curso_AlumnosCurso", Storage="_AlumnosCursos", ThisKey="CursoId", OtherKey="CursoId")]
		public EntitySet<AlumnosCurso> AlumnosCursos
		{
			get
			{
				return this._AlumnosCursos;
			}
			set
			{
				this._AlumnosCursos.Assign(value);
			}
		}
		
		[Association(Name="Curso_Trabajo", Storage="_Trabajos", ThisKey="CursoId", OtherKey="CursoId")]
		public EntitySet<Trabajo> Trabajos
		{
			get
			{
				return this._Trabajos;
			}
			set
			{
				this._Trabajos.Assign(value);
			}
		}
		
		[Association(Name="Profesore_Curso", Storage="_Profesore", ThisKey="ProfesorId", OtherKey="ProfesorId", IsForeignKey=true)]
		public Profesore Profesore
		{
			get
			{
				return this._Profesore.Entity;
			}
			set
			{
				Profesore previousValue = this._Profesore.Entity;
				if (((previousValue != value) 
							|| (this._Profesore.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profesore.Entity = null;
						previousValue.Cursos.Remove(this);
					}
					this._Profesore.Entity = value;
					if ((value != null))
					{
						value.Cursos.Add(this);
						this._ProfesorId = value.ProfesorId;
					}
					else
					{
						this._ProfesorId = default(string);
					}
					this.SendPropertyChanged("Profesore");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlumnosCursos(AlumnosCurso entity)
		{
			this.SendPropertyChanging();
			entity.Curso = this;
		}
		
		private void detach_AlumnosCursos(AlumnosCurso entity)
		{
			this.SendPropertyChanging();
			entity.Curso = null;
		}
		
		private void attach_Trabajos(Trabajo entity)
		{
			this.SendPropertyChanging();
			entity.Curso = this;
		}
		
		private void detach_Trabajos(Trabajo entity)
		{
			this.SendPropertyChanging();
			entity.Curso = null;
		}
	}
	
	[Table(Name="dbo.Profesores")]
	public partial class Profesore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProfesorId;
		
		private string _Nombre;
		
		private EntitySet<Curso> _Cursos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfesorIdChanging(string value);
    partial void OnProfesorIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Profesore()
		{
			this._Cursos = new EntitySet<Curso>(new Action<Curso>(this.attach_Cursos), new Action<Curso>(this.detach_Cursos));
			OnCreated();
		}
		
		[Column(Storage="_ProfesorId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProfesorId
		{
			get
			{
				return this._ProfesorId;
			}
			set
			{
				if ((this._ProfesorId != value))
				{
					this.OnProfesorIdChanging(value);
					this.SendPropertyChanging();
					this._ProfesorId = value;
					this.SendPropertyChanged("ProfesorId");
					this.OnProfesorIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Profesore_Curso", Storage="_Cursos", ThisKey="ProfesorId", OtherKey="ProfesorId")]
		public EntitySet<Curso> Cursos
		{
			get
			{
				return this._Cursos;
			}
			set
			{
				this._Cursos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cursos(Curso entity)
		{
			this.SendPropertyChanging();
			entity.Profesore = this;
		}
		
		private void detach_Cursos(Curso entity)
		{
			this.SendPropertyChanging();
			entity.Profesore = null;
		}
	}
	
	[Table(Name="dbo.ResultadosPrograma")]
	public partial class ResultadosPrograma : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultadoProgramaId;
		
		private string _Nombre;
		
		private EntitySet<TrabajosResultadosPrograma> _TrabajosResultadosProgramas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultadoProgramaIdChanging(int value);
    partial void OnResultadoProgramaIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public ResultadosPrograma()
		{
			this._TrabajosResultadosProgramas = new EntitySet<TrabajosResultadosPrograma>(new Action<TrabajosResultadosPrograma>(this.attach_TrabajosResultadosProgramas), new Action<TrabajosResultadosPrograma>(this.detach_TrabajosResultadosProgramas));
			OnCreated();
		}
		
		[Column(Storage="_ResultadoProgramaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResultadoProgramaId
		{
			get
			{
				return this._ResultadoProgramaId;
			}
			set
			{
				if ((this._ResultadoProgramaId != value))
				{
					this.OnResultadoProgramaIdChanging(value);
					this.SendPropertyChanging();
					this._ResultadoProgramaId = value;
					this.SendPropertyChanged("ResultadoProgramaId");
					this.OnResultadoProgramaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="ResultadosPrograma_TrabajosResultadosPrograma", Storage="_TrabajosResultadosProgramas", ThisKey="ResultadoProgramaId", OtherKey="ResultadoProgramaId")]
		public EntitySet<TrabajosResultadosPrograma> TrabajosResultadosProgramas
		{
			get
			{
				return this._TrabajosResultadosProgramas;
			}
			set
			{
				this._TrabajosResultadosProgramas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrabajosResultadosProgramas(TrabajosResultadosPrograma entity)
		{
			this.SendPropertyChanging();
			entity.ResultadosPrograma = this;
		}
		
		private void detach_TrabajosResultadosProgramas(TrabajosResultadosPrograma entity)
		{
			this.SendPropertyChanging();
			entity.ResultadosPrograma = null;
		}
	}
	
	[Table(Name="dbo.Rubricas")]
	public partial class Rubrica : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricaId;
		
		private string _Nombre;
		
		private EntitySet<CriteriosRubrica> _CriteriosRubricas;
		
		private EntitySet<RubricasTrabajo> _RubricasTrabajos;
		
		private EntitySet<ResultadosRubricaGrupo> _ResultadosRubricaGrupos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricaIdChanging(int value);
    partial void OnRubricaIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Rubrica()
		{
			this._CriteriosRubricas = new EntitySet<CriteriosRubrica>(new Action<CriteriosRubrica>(this.attach_CriteriosRubricas), new Action<CriteriosRubrica>(this.detach_CriteriosRubricas));
			this._RubricasTrabajos = new EntitySet<RubricasTrabajo>(new Action<RubricasTrabajo>(this.attach_RubricasTrabajos), new Action<RubricasTrabajo>(this.detach_RubricasTrabajos));
			this._ResultadosRubricaGrupos = new EntitySet<ResultadosRubricaGrupo>(new Action<ResultadosRubricaGrupo>(this.attach_ResultadosRubricaGrupos), new Action<ResultadosRubricaGrupo>(this.detach_ResultadosRubricaGrupos));
			OnCreated();
		}
		
		[Column(Storage="_RubricaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Rubrica_CriteriosRubrica", Storage="_CriteriosRubricas", ThisKey="RubricaId", OtherKey="RubricaId")]
		public EntitySet<CriteriosRubrica> CriteriosRubricas
		{
			get
			{
				return this._CriteriosRubricas;
			}
			set
			{
				this._CriteriosRubricas.Assign(value);
			}
		}
		
		[Association(Name="Rubrica_RubricasTrabajo", Storage="_RubricasTrabajos", ThisKey="RubricaId", OtherKey="RubricaId")]
		public EntitySet<RubricasTrabajo> RubricasTrabajos
		{
			get
			{
				return this._RubricasTrabajos;
			}
			set
			{
				this._RubricasTrabajos.Assign(value);
			}
		}
		
		[Association(Name="Rubrica_ResultadosRubricaGrupo", Storage="_ResultadosRubricaGrupos", ThisKey="RubricaId", OtherKey="RubricaId")]
		public EntitySet<ResultadosRubricaGrupo> ResultadosRubricaGrupos
		{
			get
			{
				return this._ResultadosRubricaGrupos;
			}
			set
			{
				this._ResultadosRubricaGrupos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CriteriosRubricas(CriteriosRubrica entity)
		{
			this.SendPropertyChanging();
			entity.Rubrica = this;
		}
		
		private void detach_CriteriosRubricas(CriteriosRubrica entity)
		{
			this.SendPropertyChanging();
			entity.Rubrica = null;
		}
		
		private void attach_RubricasTrabajos(RubricasTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Rubrica = this;
		}
		
		private void detach_RubricasTrabajos(RubricasTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Rubrica = null;
		}
		
		private void attach_ResultadosRubricaGrupos(ResultadosRubricaGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Rubrica = this;
		}
		
		private void detach_ResultadosRubricaGrupos(ResultadosRubricaGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Rubrica = null;
		}
	}
	
	[Table(Name="dbo.RubricasTrabajo")]
	public partial class RubricasTrabajo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricaId;
		
		private int _TrabajoId;
		
		private EntityRef<Rubrica> _Rubrica;
		
		private EntityRef<Trabajo> _Trabajo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricaIdChanging(int value);
    partial void OnRubricaIdChanged();
    partial void OnTrabajoIdChanging(int value);
    partial void OnTrabajoIdChanged();
    #endregion
		
		public RubricasTrabajo()
		{
			this._Rubrica = default(EntityRef<Rubrica>);
			this._Trabajo = default(EntityRef<Trabajo>);
			OnCreated();
		}
		
		[Column(Storage="_RubricaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					if (this._Rubrica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_TrabajoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrabajoId
		{
			get
			{
				return this._TrabajoId;
			}
			set
			{
				if ((this._TrabajoId != value))
				{
					if (this._Trabajo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrabajoIdChanging(value);
					this.SendPropertyChanging();
					this._TrabajoId = value;
					this.SendPropertyChanged("TrabajoId");
					this.OnTrabajoIdChanged();
				}
			}
		}
		
		[Association(Name="Rubrica_RubricasTrabajo", Storage="_Rubrica", ThisKey="RubricaId", OtherKey="RubricaId", IsForeignKey=true)]
		public Rubrica Rubrica
		{
			get
			{
				return this._Rubrica.Entity;
			}
			set
			{
				Rubrica previousValue = this._Rubrica.Entity;
				if (((previousValue != value) 
							|| (this._Rubrica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rubrica.Entity = null;
						previousValue.RubricasTrabajos.Remove(this);
					}
					this._Rubrica.Entity = value;
					if ((value != null))
					{
						value.RubricasTrabajos.Add(this);
						this._RubricaId = value.RubricaId;
					}
					else
					{
						this._RubricaId = default(int);
					}
					this.SendPropertyChanged("Rubrica");
				}
			}
		}
		
		[Association(Name="Trabajo_RubricasTrabajo", Storage="_Trabajo", ThisKey="TrabajoId", OtherKey="TrabajoId", IsForeignKey=true)]
		public Trabajo Trabajo
		{
			get
			{
				return this._Trabajo.Entity;
			}
			set
			{
				Trabajo previousValue = this._Trabajo.Entity;
				if (((previousValue != value) 
							|| (this._Trabajo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trabajo.Entity = null;
						previousValue.RubricasTrabajos.Remove(this);
					}
					this._Trabajo.Entity = value;
					if ((value != null))
					{
						value.RubricasTrabajos.Add(this);
						this._TrabajoId = value.TrabajoId;
					}
					else
					{
						this._TrabajoId = default(int);
					}
					this.SendPropertyChanged("Trabajo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Trabajos")]
	public partial class Trabajo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrabajoId;
		
		private string _CursoId;
		
		private bool _EsGrupal;
		
		private string _Nombre;
		
		private System.Nullable<System.DateTime> _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private string _Iniciativa;
		
		private string _Instrucciones;
		
		private EntitySet<TrabajosResultadosPrograma> _TrabajosResultadosProgramas;
		
		private EntitySet<RubricasTrabajo> _RubricasTrabajos;
		
		private EntitySet<Grupo> _Grupos;
		
		private EntityRef<Curso> _Curso;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrabajoIdChanging(int value);
    partial void OnTrabajoIdChanged();
    partial void OnCursoIdChanging(string value);
    partial void OnCursoIdChanged();
    partial void OnEsGrupalChanging(bool value);
    partial void OnEsGrupalChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnFechaInicioChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    partial void OnIniciativaChanging(string value);
    partial void OnIniciativaChanged();
    partial void OnInstruccionesChanging(string value);
    partial void OnInstruccionesChanged();
    #endregion
		
		public Trabajo()
		{
			this._TrabajosResultadosProgramas = new EntitySet<TrabajosResultadosPrograma>(new Action<TrabajosResultadosPrograma>(this.attach_TrabajosResultadosProgramas), new Action<TrabajosResultadosPrograma>(this.detach_TrabajosResultadosProgramas));
			this._RubricasTrabajos = new EntitySet<RubricasTrabajo>(new Action<RubricasTrabajo>(this.attach_RubricasTrabajos), new Action<RubricasTrabajo>(this.detach_RubricasTrabajos));
			this._Grupos = new EntitySet<Grupo>(new Action<Grupo>(this.attach_Grupos), new Action<Grupo>(this.detach_Grupos));
			this._Curso = default(EntityRef<Curso>);
			OnCreated();
		}
		
		[Column(Storage="_TrabajoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrabajoId
		{
			get
			{
				return this._TrabajoId;
			}
			set
			{
				if ((this._TrabajoId != value))
				{
					this.OnTrabajoIdChanging(value);
					this.SendPropertyChanging();
					this._TrabajoId = value;
					this.SendPropertyChanged("TrabajoId");
					this.OnTrabajoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CursoId", DbType="VarChar(10)")]
		public string CursoId
		{
			get
			{
				return this._CursoId;
			}
			set
			{
				if ((this._CursoId != value))
				{
					if (this._Curso.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCursoIdChanging(value);
					this.SendPropertyChanging();
					this._CursoId = value;
					this.SendPropertyChanged("CursoId");
					this.OnCursoIdChanged();
				}
			}
		}
		
		[Column(Storage="_EsGrupal", DbType="Bit NOT NULL")]
		public bool EsGrupal
		{
			get
			{
				return this._EsGrupal;
			}
			set
			{
				if ((this._EsGrupal != value))
				{
					this.OnEsGrupalChanging(value);
					this.SendPropertyChanging();
					this._EsGrupal = value;
					this.SendPropertyChanged("EsGrupal");
					this.OnEsGrupalChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Column(Storage="_Iniciativa", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Iniciativa
		{
			get
			{
				return this._Iniciativa;
			}
			set
			{
				if ((this._Iniciativa != value))
				{
					this.OnIniciativaChanging(value);
					this.SendPropertyChanging();
					this._Iniciativa = value;
					this.SendPropertyChanged("Iniciativa");
					this.OnIniciativaChanged();
				}
			}
		}
		
		[Column(Storage="_Instrucciones", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Instrucciones
		{
			get
			{
				return this._Instrucciones;
			}
			set
			{
				if ((this._Instrucciones != value))
				{
					this.OnInstruccionesChanging(value);
					this.SendPropertyChanging();
					this._Instrucciones = value;
					this.SendPropertyChanged("Instrucciones");
					this.OnInstruccionesChanged();
				}
			}
		}
		
		[Association(Name="Trabajo_TrabajosResultadosPrograma", Storage="_TrabajosResultadosProgramas", ThisKey="TrabajoId", OtherKey="TrabajoId")]
		public EntitySet<TrabajosResultadosPrograma> TrabajosResultadosProgramas
		{
			get
			{
				return this._TrabajosResultadosProgramas;
			}
			set
			{
				this._TrabajosResultadosProgramas.Assign(value);
			}
		}
		
		[Association(Name="Trabajo_RubricasTrabajo", Storage="_RubricasTrabajos", ThisKey="TrabajoId", OtherKey="TrabajoId")]
		public EntitySet<RubricasTrabajo> RubricasTrabajos
		{
			get
			{
				return this._RubricasTrabajos;
			}
			set
			{
				this._RubricasTrabajos.Assign(value);
			}
		}
		
		[Association(Name="Trabajo_Grupo", Storage="_Grupos", ThisKey="TrabajoId", OtherKey="TrabajoId")]
		public EntitySet<Grupo> Grupos
		{
			get
			{
				return this._Grupos;
			}
			set
			{
				this._Grupos.Assign(value);
			}
		}
		
		[Association(Name="Curso_Trabajo", Storage="_Curso", ThisKey="CursoId", OtherKey="CursoId", IsForeignKey=true)]
		public Curso Curso
		{
			get
			{
				return this._Curso.Entity;
			}
			set
			{
				Curso previousValue = this._Curso.Entity;
				if (((previousValue != value) 
							|| (this._Curso.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curso.Entity = null;
						previousValue.Trabajos.Remove(this);
					}
					this._Curso.Entity = value;
					if ((value != null))
					{
						value.Trabajos.Add(this);
						this._CursoId = value.CursoId;
					}
					else
					{
						this._CursoId = default(string);
					}
					this.SendPropertyChanged("Curso");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrabajosResultadosProgramas(TrabajosResultadosPrograma entity)
		{
			this.SendPropertyChanging();
			entity.Trabajo = this;
		}
		
		private void detach_TrabajosResultadosProgramas(TrabajosResultadosPrograma entity)
		{
			this.SendPropertyChanging();
			entity.Trabajo = null;
		}
		
		private void attach_RubricasTrabajos(RubricasTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Trabajo = this;
		}
		
		private void detach_RubricasTrabajos(RubricasTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Trabajo = null;
		}
		
		private void attach_Grupos(Grupo entity)
		{
			this.SendPropertyChanging();
			entity.Trabajo = this;
		}
		
		private void detach_Grupos(Grupo entity)
		{
			this.SendPropertyChanging();
			entity.Trabajo = null;
		}
	}
	
	[Table(Name="dbo.ResultadosRubricaGrupo")]
	public partial class ResultadosRubricaGrupo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricaId;
		
		private int _GrupoId;
		
		private int _CriterioId;
		
		private EntityRef<Rubrica> _Rubrica;
		
		private EntityRef<CriteriosRubrica> _CriteriosRubrica;
		
		private EntityRef<Grupo> _Grupo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricaIdChanging(int value);
    partial void OnRubricaIdChanged();
    partial void OnGrupoIdChanging(int value);
    partial void OnGrupoIdChanged();
    partial void OnCriterioIdChanging(int value);
    partial void OnCriterioIdChanged();
    #endregion
		
		public ResultadosRubricaGrupo()
		{
			this._Rubrica = default(EntityRef<Rubrica>);
			this._CriteriosRubrica = default(EntityRef<CriteriosRubrica>);
			this._Grupo = default(EntityRef<Grupo>);
			OnCreated();
		}
		
		[Column(Storage="_RubricaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RubricaId
		{
			get
			{
				return this._RubricaId;
			}
			set
			{
				if ((this._RubricaId != value))
				{
					if (this._Rubrica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricaIdChanging(value);
					this.SendPropertyChanging();
					this._RubricaId = value;
					this.SendPropertyChanged("RubricaId");
					this.OnRubricaIdChanged();
				}
			}
		}
		
		[Column(Storage="_GrupoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GrupoId
		{
			get
			{
				return this._GrupoId;
			}
			set
			{
				if ((this._GrupoId != value))
				{
					if (this._Grupo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrupoIdChanging(value);
					this.SendPropertyChanging();
					this._GrupoId = value;
					this.SendPropertyChanged("GrupoId");
					this.OnGrupoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CriterioId", DbType="Int NOT NULL")]
		public int CriterioId
		{
			get
			{
				return this._CriterioId;
			}
			set
			{
				if ((this._CriterioId != value))
				{
					if (this._CriteriosRubrica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCriterioIdChanging(value);
					this.SendPropertyChanging();
					this._CriterioId = value;
					this.SendPropertyChanged("CriterioId");
					this.OnCriterioIdChanged();
				}
			}
		}
		
		[Association(Name="Rubrica_ResultadosRubricaGrupo", Storage="_Rubrica", ThisKey="RubricaId", OtherKey="RubricaId", IsForeignKey=true)]
		public Rubrica Rubrica
		{
			get
			{
				return this._Rubrica.Entity;
			}
			set
			{
				Rubrica previousValue = this._Rubrica.Entity;
				if (((previousValue != value) 
							|| (this._Rubrica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rubrica.Entity = null;
						previousValue.ResultadosRubricaGrupos.Remove(this);
					}
					this._Rubrica.Entity = value;
					if ((value != null))
					{
						value.ResultadosRubricaGrupos.Add(this);
						this._RubricaId = value.RubricaId;
					}
					else
					{
						this._RubricaId = default(int);
					}
					this.SendPropertyChanged("Rubrica");
				}
			}
		}
		
		[Association(Name="CriteriosRubrica_ResultadosRubricaGrupo", Storage="_CriteriosRubrica", ThisKey="CriterioId", OtherKey="CriterioId", IsForeignKey=true)]
		public CriteriosRubrica CriteriosRubrica
		{
			get
			{
				return this._CriteriosRubrica.Entity;
			}
			set
			{
				CriteriosRubrica previousValue = this._CriteriosRubrica.Entity;
				if (((previousValue != value) 
							|| (this._CriteriosRubrica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CriteriosRubrica.Entity = null;
						previousValue.ResultadosRubricaGrupos.Remove(this);
					}
					this._CriteriosRubrica.Entity = value;
					if ((value != null))
					{
						value.ResultadosRubricaGrupos.Add(this);
						this._CriterioId = value.CriterioId;
					}
					else
					{
						this._CriterioId = default(int);
					}
					this.SendPropertyChanged("CriteriosRubrica");
				}
			}
		}
		
		[Association(Name="Grupo_ResultadosRubricaGrupo", Storage="_Grupo", ThisKey="GrupoId", OtherKey="GrupoId", IsForeignKey=true)]
		public Grupo Grupo
		{
			get
			{
				return this._Grupo.Entity;
			}
			set
			{
				Grupo previousValue = this._Grupo.Entity;
				if (((previousValue != value) 
							|| (this._Grupo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grupo.Entity = null;
						previousValue.ResultadosRubricaGrupos.Remove(this);
					}
					this._Grupo.Entity = value;
					if ((value != null))
					{
						value.ResultadosRubricaGrupos.Add(this);
						this._GrupoId = value.GrupoId;
					}
					else
					{
						this._GrupoId = default(int);
					}
					this.SendPropertyChanged("Grupo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Grupos")]
	public partial class Grupo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GrupoId;
		
		private int _TrabajoId;
		
		private string _Nota;
		
		private EntitySet<AlumnosGrupo> _AlumnosGrupos;
		
		private EntitySet<ArchivosGrupo> _ArchivosGrupos;
		
		private EntitySet<ResultadosRubricaGrupo> _ResultadosRubricaGrupos;
		
		private EntityRef<Trabajo> _Trabajo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGrupoIdChanging(int value);
    partial void OnGrupoIdChanged();
    partial void OnTrabajoIdChanging(int value);
    partial void OnTrabajoIdChanged();
    partial void OnNotaChanging(string value);
    partial void OnNotaChanged();
    #endregion
		
		public Grupo()
		{
			this._AlumnosGrupos = new EntitySet<AlumnosGrupo>(new Action<AlumnosGrupo>(this.attach_AlumnosGrupos), new Action<AlumnosGrupo>(this.detach_AlumnosGrupos));
			this._ArchivosGrupos = new EntitySet<ArchivosGrupo>(new Action<ArchivosGrupo>(this.attach_ArchivosGrupos), new Action<ArchivosGrupo>(this.detach_ArchivosGrupos));
			this._ResultadosRubricaGrupos = new EntitySet<ResultadosRubricaGrupo>(new Action<ResultadosRubricaGrupo>(this.attach_ResultadosRubricaGrupos), new Action<ResultadosRubricaGrupo>(this.detach_ResultadosRubricaGrupos));
			this._Trabajo = default(EntityRef<Trabajo>);
			OnCreated();
		}
		
		[Column(Storage="_GrupoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GrupoId
		{
			get
			{
				return this._GrupoId;
			}
			set
			{
				if ((this._GrupoId != value))
				{
					this.OnGrupoIdChanging(value);
					this.SendPropertyChanging();
					this._GrupoId = value;
					this.SendPropertyChanged("GrupoId");
					this.OnGrupoIdChanged();
				}
			}
		}
		
		[Column(Storage="_TrabajoId", DbType="Int NOT NULL")]
		public int TrabajoId
		{
			get
			{
				return this._TrabajoId;
			}
			set
			{
				if ((this._TrabajoId != value))
				{
					if (this._Trabajo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrabajoIdChanging(value);
					this.SendPropertyChanging();
					this._TrabajoId = value;
					this.SendPropertyChanged("TrabajoId");
					this.OnTrabajoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nota", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Nota
		{
			get
			{
				return this._Nota;
			}
			set
			{
				if ((this._Nota != value))
				{
					this.OnNotaChanging(value);
					this.SendPropertyChanging();
					this._Nota = value;
					this.SendPropertyChanged("Nota");
					this.OnNotaChanged();
				}
			}
		}
		
		[Association(Name="Grupo_AlumnosGrupo", Storage="_AlumnosGrupos", ThisKey="GrupoId", OtherKey="GrupoId")]
		public EntitySet<AlumnosGrupo> AlumnosGrupos
		{
			get
			{
				return this._AlumnosGrupos;
			}
			set
			{
				this._AlumnosGrupos.Assign(value);
			}
		}
		
		[Association(Name="Grupo_ArchivosGrupo", Storage="_ArchivosGrupos", ThisKey="GrupoId", OtherKey="GrupoId")]
		public EntitySet<ArchivosGrupo> ArchivosGrupos
		{
			get
			{
				return this._ArchivosGrupos;
			}
			set
			{
				this._ArchivosGrupos.Assign(value);
			}
		}
		
		[Association(Name="Grupo_ResultadosRubricaGrupo", Storage="_ResultadosRubricaGrupos", ThisKey="GrupoId", OtherKey="GrupoId")]
		public EntitySet<ResultadosRubricaGrupo> ResultadosRubricaGrupos
		{
			get
			{
				return this._ResultadosRubricaGrupos;
			}
			set
			{
				this._ResultadosRubricaGrupos.Assign(value);
			}
		}
		
		[Association(Name="Trabajo_Grupo", Storage="_Trabajo", ThisKey="TrabajoId", OtherKey="TrabajoId", IsForeignKey=true)]
		public Trabajo Trabajo
		{
			get
			{
				return this._Trabajo.Entity;
			}
			set
			{
				Trabajo previousValue = this._Trabajo.Entity;
				if (((previousValue != value) 
							|| (this._Trabajo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trabajo.Entity = null;
						previousValue.Grupos.Remove(this);
					}
					this._Trabajo.Entity = value;
					if ((value != null))
					{
						value.Grupos.Add(this);
						this._TrabajoId = value.TrabajoId;
					}
					else
					{
						this._TrabajoId = default(int);
					}
					this.SendPropertyChanged("Trabajo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlumnosGrupos(AlumnosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Grupo = this;
		}
		
		private void detach_AlumnosGrupos(AlumnosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Grupo = null;
		}
		
		private void attach_ArchivosGrupos(ArchivosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Grupo = this;
		}
		
		private void detach_ArchivosGrupos(ArchivosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Grupo = null;
		}
		
		private void attach_ResultadosRubricaGrupos(ResultadosRubricaGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Grupo = this;
		}
		
		private void detach_ResultadosRubricaGrupos(ResultadosRubricaGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Grupo = null;
		}
	}
	
	[Table(Name="dbo.Alumnos")]
	public partial class Alumno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AlumnoId;
		
		private string _Nombre;
		
		private string _Mail;
		
		private EntitySet<AlumnosCurso> _AlumnosCursos;
		
		private EntitySet<AlumnosGrupo> _AlumnosGrupos;
		
		private EntitySet<Archivo> _Archivos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlumnoIdChanging(string value);
    partial void OnAlumnoIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    #endregion
		
		public Alumno()
		{
			this._AlumnosCursos = new EntitySet<AlumnosCurso>(new Action<AlumnosCurso>(this.attach_AlumnosCursos), new Action<AlumnosCurso>(this.detach_AlumnosCursos));
			this._AlumnosGrupos = new EntitySet<AlumnosGrupo>(new Action<AlumnosGrupo>(this.attach_AlumnosGrupos), new Action<AlumnosGrupo>(this.detach_AlumnosGrupos));
			this._Archivos = new EntitySet<Archivo>(new Action<Archivo>(this.attach_Archivos), new Action<Archivo>(this.detach_Archivos));
			OnCreated();
		}
		
		[Column(Storage="_AlumnoId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AlumnoId
		{
			get
			{
				return this._AlumnoId;
			}
			set
			{
				if ((this._AlumnoId != value))
				{
					this.OnAlumnoIdChanging(value);
					this.SendPropertyChanging();
					this._AlumnoId = value;
					this.SendPropertyChanged("AlumnoId");
					this.OnAlumnoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Mail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[Association(Name="Alumno_AlumnosCurso", Storage="_AlumnosCursos", ThisKey="AlumnoId", OtherKey="AlumnoId")]
		public EntitySet<AlumnosCurso> AlumnosCursos
		{
			get
			{
				return this._AlumnosCursos;
			}
			set
			{
				this._AlumnosCursos.Assign(value);
			}
		}
		
		[Association(Name="Alumno_AlumnosGrupo", Storage="_AlumnosGrupos", ThisKey="AlumnoId", OtherKey="AlumnoId")]
		public EntitySet<AlumnosGrupo> AlumnosGrupos
		{
			get
			{
				return this._AlumnosGrupos;
			}
			set
			{
				this._AlumnosGrupos.Assign(value);
			}
		}
		
		[Association(Name="Alumno_Archivo", Storage="_Archivos", ThisKey="AlumnoId", OtherKey="AlumnoId")]
		public EntitySet<Archivo> Archivos
		{
			get
			{
				return this._Archivos;
			}
			set
			{
				this._Archivos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlumnosCursos(AlumnosCurso entity)
		{
			this.SendPropertyChanging();
			entity.Alumno = this;
		}
		
		private void detach_AlumnosCursos(AlumnosCurso entity)
		{
			this.SendPropertyChanging();
			entity.Alumno = null;
		}
		
		private void attach_AlumnosGrupos(AlumnosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Alumno = this;
		}
		
		private void detach_AlumnosGrupos(AlumnosGrupo entity)
		{
			this.SendPropertyChanging();
			entity.Alumno = null;
		}
		
		private void attach_Archivos(Archivo entity)
		{
			this.SendPropertyChanging();
			entity.Alumno = this;
		}
		
		private void detach_Archivos(Archivo entity)
		{
			this.SendPropertyChanging();
			entity.Alumno = null;
		}
	}
}
#pragma warning restore 1591
